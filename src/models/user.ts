import { MongoConnector } from "../connectors";
import { container } from "../ioc.config";
import { TYPES } from "../ioc.types";
import { Authorize } from "./authorize";

export interface IUser {
  _id?: string;
  displayName?: string;
  email: string;
  password: string;
  autoGenerated?: boolean;
  firstName?: string;
  lastName?: string;
  isConsultant?: boolean;
  isCoach?: boolean;
  allowSharing?: boolean;
  birthday?: Date;
  startedPlaying?: Date;
  coaches?: Array<{ _id: string, name: string }>;
  friends?: Array<{ _id: string, name: string }>;
  token?: string;
  updatedAt?: Date;
  createdAt?: Date;
  createdBy?: string;
}

export class User extends Authorize {

  /**
   * Finds User by id.
   * @param id User id.
   */
  public static findOneById(id: string): Promise<IUser> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    return db.findById(id)
      .then((user) => user);
  }

  /**
   * Finds User by token.
   * @param token authentication token.
   */
  public static findOneByToken(token: string): Promise<IUser> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    return db.findOne({ token })
      .then((user) => user);
  }

  /**
   * Finds User by email.
   * @param email to find user by.
   */
  public static findOneByEmail(email: string): Promise<IUser> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    return db.findOne({ email })
      .then((user) => user);
  }

  /**
   * Finds User by createdBy.
   * @param id of the creator.
   */
  public static findUsersByCreatedBy(id: String): Promise<Array<IUser>> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    return db.find({ createdBy: id })
      .then((users) => users);
  }

  /**
   * Finds User by email.
   * @param token authentication token.
   */
  public static create(user: IUser): Promise<IUser> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    return db.create(user);
  }

  /**
   * Updates previously restored user.
   * @param user User to be updated.
   */
  public static save(user: IUser): Promise<IUser> {
    const db = container.get<MongoConnector>(TYPES.MongoConnector).users;
    user.updatedAt = new Date();
    return db.findByIdAndUpdate(user._id, user, { new: true }).then((doc) => doc);
  }
}
