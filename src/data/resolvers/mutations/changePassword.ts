import { User, IUser, IViewer } from "../../models";
import { MailService, Email } from "../../../smtp";

export interface IChangePasswordArg {
  oldPassword: string;
  newPassword: string;
}

export const changePassword: (root: IViewer, arg: IChangePasswordArg) => Promise<IUser> = (viewer, user) => {
  return User.findOneByToken(viewer.token)
    .then((existingUser: IUser) => {
      if (!existingUser || user.oldPassword !== existingUser.password) {
        throw Error("No user found for token or password not correct");
      }

      existingUser.password = user.newPassword;
      existingUser.autoGenerated = false;
      existingUser.token = null;

      return User.save(existingUser)
        .then(newUser => {
          const email = new Email(existingUser.email,
            "Password changed for Racket O Meter",
            `Your password has been changed.`,
            `<b>Your password has been changed.<b>`);

          if (email.isValid()) {
            const ms = new MailService();
            ms.sendMail(email);
            return existingUser;
          } else {
            return Error("Invalid email adresse");
          }
        });
    });
};
